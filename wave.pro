;+
;FUNCTION WAVE(PSD,DFP[,D1=,D2=,TSCPUP=,STATIC=,VIBRATION=,SEED=,/SPECTRUM])
;
;    USAGE 1: Generates a random phase screen from a given phase PSD, and 
;    optionally computes the instantaneous PSF (amplitude and
;    intensity) associated with it (if D1 and D2 or TSCPUP are
;    given).
;
;    Note that as all aberrations quatities are given in phase (rad)
;    unit, indicating the wavelength is useless and generates an error
;    message. 
;
;    A STATIC PHASE to the random generated phase with input STATIC.
;
;    The function PAOLA can create an AO corrected spatial power
;    spectrum to be used in WAVE, by seetng the /WAVE into the call of
;    PAOLA. Works also for SEEING LIMITED. Do NOT use the pupil transmission
;    given by the function PSFOTFTSC, as it does not have the same dimension
;    as the power spectrum generated by PAOLA.
;
;    A VIBRATION JITTER can be added to the instantaneous PSF with input VIBRATION.
;
;FUNCTION WAVE(DIMMAT,DXP,r0,OSCALE,ISCALE[,LAMBDA=,D1=,D2=,TSCPUP=,SEED=,/SPECTRUM])
;
;    USAGE 2: Generates a random phase screen from a Hills-Andrew PSD,
;    or Von Karman (inner scale = 0) or pure Kolmogorov (infinite
;    outer scale, inner scale = 0), for a given r0, and optionally
;    computes the instantaneous PSF (amplitude and intensity)
;    associated with it (if D1 and D2 or TSCPUP are given).
;
;NOTE 1 THE PHASE SCREEN IS PERIODIC OVER THE PS MATRIX WIDTH
;
;   The spatial frequency grid associated to the PSD is necessarily limited
;   to a minimal non-zero value df = the spatial frequency pixel size (the 
;   contribution of the PSD at f=0 is associated with the modulus square 
;   of the average of the signal). Therefore, it is not possible when using 
;   the PSD approach, to generate phase screen aberrations with periodicity 
;   larger than Lmax=1/df. As df is associated to the direct space pixel
;   size via dx=1/(n*df), it comes dx=Lmax/n or Lmax=n*dx, so ...
;      >>> THE PHASE SCREEN IS NECESSARILY PERIODIC OVER ITS WIDTH <<<
;   If this is an issue, the only solution is to increase the matrix
;   size, while keeping the same dx, so the PS periodicity increases too.
;
;NOTE 2 THERE IS AN APPARENT OUTER SCALE, DUE TO PHASE SCREEN PERIODICITY
;
;   By fitting the generated phase on Zernike polynomials, I have checked that
;   the variance distribution and values follows indeed what we would 
;   expect for a Kolmogorov optical turbulence with a parameter D/r0;
;   BUT that if D is not << matrix size then the tip-tilt amplitude is 
;   smaller than we would expect from a Kolmo spectrum, i.e. we indeed 
;   see the contribution of a spurious outer scale, and practically we
;   find that the apparent ratio L0/D = 3.1 * (matrix width)/D - 2.1, or
;
;      MW/D  tip-tilt variance attenuation
;      1.36  88 %
;      2     80 %
;      3     70 %
;      4     63 %
;      5     60 %
;      6     55 %
;      8     50 %
;
;   It is important to note, thought, that the apparent L0/D ratio
;   increases for higher orders, so the higher order aberration
;   variances are less affected. For MW/D=1.36, for instance,
;   Z2,3 variances are attenuated as if L0/D = 2.7, but 2nd order
;   Zernike (Z4,5,6) variances are attenuated as if L0/D = 7,
;   corresponding to an attenuation of 11 %, instead of 38 %
;   if L0/D was the same than for the tip-tilt.
;
;NOTE 3
;
;   The average PSF in HILL-ANDREWS mode converges towards the
;   theoretical seeing limited PSF that can be calculated for
;   instance with the code PAOLA. Same for the 2nd option, when a
;   phase spatial power spectrum is given as an input.
;
;INPUTS - see also EXAMPLES below
;
;  WHEN PHASE PSD IS GIVEN (USAGE 1)
;
;    PSD | 2D REAL ARRAY | RAD^2*M^2
;    Phase PSD. Must be an EVEN size array, with central pixel
;    N/2,N/2 associated to f=0. You can get it from PAOLA output
;    psd_wave by setting the PAOLA keyword /WAVE.
;
;    DFP | REAL SCALAR | 1/M
;    Spatial frequency pixel size associated with PSD. You can get it
;    from PAOLA output dfp_wave by setting the PAOLA keyword /WAVE.
;
;  WHEN HILLS-ANDREW PSD IS THE DEFAULT (USAGE 2)
;
;    DIMMAT | INTEGER EVEN SCALAR | 1
;    Phase screen matrix size
;    >>> MUST BE EVEN <<<
;
;    DXP | REAL SCALAR | M
;    Pupil plane pixel size.
;
;    r0 | REAL SCALAR | M
;    Fried's parameter at 500 nm.
;
;    OSCALE | REAL SCALAR, OR -1 | M
;    Outer scale. Set it to -1 if you want an infinite outer scale.
;
;    ISCALE | REAL SCALAR | M
;    Inner scale.
;
;OPTIONAL INPUTS name | type | units | default
;
;  Optional inputs can be entered in any order, as long as the syntax
;  name=<value> is used.
;
;  Set D1 and D2 if you want the PSF associated with the generated
;  phase as seen through an annular pupil of diameters D1 and D2.
;
;    D1= | REAL SCALAR | M | none
;    Pupil external diameter.
;    ################## MUST READ NOTE ##################
;    D1 must be < than the half the size of the support matrix on
;    which the phase is built, i.e
;        D1 < dim(PSD)*DXP/2
;    where dim(PSD) is the PSD matrix size in pixels, and DXP is the
;    pixel scale in meters/pixel in the pupil plane, associated to DFP
;    by 1/dim(PSD)/DXP. If D1 is larger than this limit, then the PSF
;    will not be Nyquist sampled in the focal plane and aliasing will
;    occur. The computation will continue, but a WARNING will be issued.
;    ####################################################
;
;    D2= | REAL SCALAR | M | none
;    Pupil internal diameter.
;
;    TSCPUP= | REAL ARRAY 2D | 1 | none
;    Telescope pupil transmission, 1 inside, 0 outside.
;    This is an alternative to the inputs D1 and D2 if your pupil has
;    a complex structure.
;    >>>>> NOT COMPATIBLE WITH D1 AND D2 INPUTS <<<<<
;    (1) TSCPUP can be taken from the output pup_wave of PAOLA, when
;    the keyword /WAVE has been actived in that function.
;    (2) The radius of this pupil is defined by the maximal distance
;    between the pupil mask center and edge.
;    (3) MUST HAVE SAME MATRIX SIZE THAN PSD ARRAY (1ST USAGE OF WAVE)
;    (4) MUST HAVE SAME MATRIX SIZE THAN DIMMAT (2ND USAGE OF WAVE)
;    (5) TELESCOPE PUPIL DIAMETER MUST BE SMALLER THAN HALF THE
;        MATRIX SIZE (SEE NOTE ABOUT D1 ABOVE)
;
;    STATIC= | REAL ARRAY 2D | 1 | RADIAN OF WAVEFRONT PHASE 
;    Telescope static phase aberration. Associated with the wavelength
;    that was set in PSFOTFTSC and PAOLA calls.
;    MUST HAVE SAME MATRIX SIZE THAN PSD ARRAY (1ST USAGE OF WAVE)
;
;    VIBRATION= | A 3 COMPONENTS STRUCTURE VARIABLE | - | -
;    |  Vibrations induced on the optical beam, as seen in the image plane.
;    |  These RMS values are used to draw a random tip-tilt of the beam from
;    |  a gaussian distribution.
;    |
;    |__.SIGMA_TTX | POSITIVE REAL SCALAR | ASEC
;    |  Tip jitter RMS, as seen in the focal plane (sky).
;    |
;    |__.SIGMA_TTY | POSITIVE REAL SCALAR | ASEC
;    |  Tilt jitter RMS, as seen in the focal plane (sky). 
;    |
;    |__.ORIENTATION | REAL SCALAR | DEGREE
;    |  Orientation angle of the tip (TTx) perturbation. Counterclockwise.
;    |  +90 corresponds to the positive y-axis, +180 to the negative
;    |  x-axis. The tilt jitter is perpendicular to this direction. 
;    |
;    |--SYNTAX : VIBRATION={SIGMA_TTX:value,SIGMA_TTY:value,ORIENTATION:angle}
;
;    LAMBDA= | REAL SCALAR | MICRONS | 0.5
;    Imaging wavelength in microns. 0.5 microns by default.
;    If you use the optional input VIBRATION, then you need to introduce
;    the wavelength, in order to build the phase tip-tilt. If not, then 
;    there is no need to enter a wavelength, as the PSD is already a 
;    phase related object, defined for a given wavelength.
;
;    SEED= | INTEGER SCALAR | 1 | randomly set during execution
;    A constant used to initialize the random phase screen sequence
;    on input. For instance, if one wants to reproduce a certain 
;    sequence of N phase screens, that has been initiated with a
;    SEED value, say SEED=S, then set the SEED input to the very
;    same value, SEED=S. After the generation of the first random
;    screen, and for all N-1 subsequent calls, IDL will set the SEED
;    following a certain sequence, always the same for the given
;    initial SEED, so the very same phase screens sequence will be
;    generated.
;    ################## MUST READ NOTE ##################
;    if you keep the same SEED, DO NOT change the matrix size DIM,
;    because the phase screen values will be redistributed differently,
;    and you would not get the same phase screen.
;    ####################################################
;
;KEYWORDS
;
;    /SPECTRUM if set, the the output structure variable will
;    contains
;    (1) the phase Fourier transform
;    (2) the phase PSD
;    (3) the spatial frequency pixel size dxf.
;
;OUTPUTS name | type | units
;
;   The output is a structure variable, with components:
;
;    .phase | 2D REAL ARRAY | RAD
;    Phase screen.
;
;    .dxp | REAL SCALAR | M
;    Pupil plane pixel size.
;
;  If /SPECTRUM is set, then the following components are added:
;
;    .phaseft | 2D COMPLEX ARRAY | RAD*M^2
;    Phase Fourier transform (before multiplication of phase with pupil).
;
;    .psd | 2D REAL ARRAY | RAD^2*M^2
;    Average phase spatial power spectrum used for the phase FT generation.
;
;    .dfp | REAL SCALAR | 1/M/PX
;    Pupil plane pixel size.
;
;OPTIONAL OUTPUTS name | type | units
;
;    If D1 and D2 or TSCPUP are set, then the following components are added:
;
;    .pupil | 2D BYTE ARRAY | 1
;    Pupil transmission.
;
;    .psf | 2D REAL ARRAY | STREHL
;    Instantaneous intensity PSF associated to PS inside annular pupil.
;
;    .apsf | 2D REAL ARRAY | STREHL^(1/2)
;    Instantaneous amplitude PSF associated to PS inside annular pupil.
;
;    .dxf | REAL SCALAR | ASEC
;    Focal plane pixel size.
;    ################## MUST READ NOTE ##################
;    (1) If you chose the 1st way of using wave.pro, where the phase PSD
;    is given as an input, you know in principe the wavelength
;    associated with the PSD, so to get the actual PSF pixel size you simply
;    need to multiply .dfp by lambda*rad2asec. DXF WILL NOT BE GIVEN.
;    ####################################################
;
;    (2) If you chose the 2nd mode, as you have to enter the wavelength,
;    wave.pro will compute and give you the actual PSF pixel size.
;
;EXTERNAL, non-IDL FUNCTIONS NEEDED
;
;    from Laurent Jolissaint's library of functions/procedures
;
;    coogrid.pro
;    intx.pro
;    mathft.pro
;    valid_input.pro
;
;HISTORY
;
;    Aug 24, 2007 Laurent Jolissaint Leiden University, 1st version.
;    Nov 12, 2007 LJ added inner scale and Hills-Andrew PSD formula.
;    Nov 26, 2007 LJ added D1 and D2 for PSF calculation.
;    Nov 26, 2007 LJ changed name from "phasescreen" to "wave".
;    Dec 03, 2007 LJ added /ALL keyword
;    Feb 07, 2008 LJ improved user manual, added apsf output.
;    Mar 14, 2008 LJ bug corrected on random seed definition.
;    Mar 14, 2008 LJ removed optional input LAMBDA when PSD is given.
;    Mar 20, 2008 LJ added /SINGLE input.
;    Apr 07, 2008 LJ replaced /ALL for /SPECTRUM, improved comments.
;    Apr 28, 2008 LJ added dxf on output for both function usages.
;    May 01, 2008 LJ added TSCPUP optional input.
;    May 16, 2008 LJ added piston filtering by default.
;    Oct 04, 2008 LJ corrected buglet when psd in output: dim was too large by 1 px.
;    Mar 07, 2014 LJ ()->[] for arrays
;    Sep 18, 2017 LJ removed /PISTON_OFF keyword (piston now removed by default)
;    Sep 18, 2017 LJ removed ERR_EXIT, replaced with VALID_INPUT
;    Sep 18, 2017 LJ added an error message if the pupil diameter is larger
;                    than half of the phase matrix size (aliasing would
;                    occur in the PSF in this case and the computation is useless).
;    Sep 18, 2017 LJ computation done in double, removed keyword /SINGLE
;    May 20, 2019 LJ removed output dxf when giving the PSD as an
;                    input because it was misleading. It's best if
;                    the user compute this, as all the information is known.
;    May 01, 2020 LJ improved the test of the size of the pupil mask
;                    wrt the phase mask. Improved the testing of the
;                    inputs. Improved the user manual.
;    May 03, 2020 LJ addition of telescope static aberrations.
;    May 03, 2020 LJ addition of random gaussian vibrations.
;
;BUGS laurent.jolissaint@heig-vd.ch
;
;-
FUNCTION WAVE,P1,P2,P3,P4,P5,D1=D1,D2=D2,TSCPUP=TSCPUP,STATIC=STATIC,LAMBDA=LAMBDA,SEED=SEED,SPECTRUM=SPECTRUM,VIBRATION=VIBRATION

  ;-----------------------------------
  ;CHECKING INPUTS VALIDITY
  ;-----------------------------------
  ;
  ;ARGUMENTS CHECK AND SETTING OF DIMMAT,DXP,DFP,PSD
  if n_params() ne 2 and n_params() ne 5 then message,'THERE MUST BE 2 OR 5 MANDATORY INPUTS'
  if n_params() eq 2 then begin ; this is the case with the phase PSD as an input
    VALID_INPUT,'WAVE.PRO','PSD',P1,'real',2,'no','0+','free'
    sz=size(P1)
    if sz[1] ne sz[2] then message,'THE PHASE PSD MUST BE A SQUARE ARRAY'
    if sz[1] mod 2 eq 1 then message,'PSD MATRIX SIZE MUST BE EVEN'
    VALID_INPUT,'WAVE.PRO','DFP',P2,'real',0,'no','++','free'
    if size(VIBRATION,/type) eq 0 then if size(LAMBDA,/type) ne 0 then message,'WAVELENGTH IS NOT NEEDED (INPUT LAMBDA) : THE PSD IS ALREADY A PHASE-BASED OBJECT'
    if size(VIBRATION,/type) ne 0 then if size(LAMBDA,/type) eq 0 then message,'WAVELENGTH IS NEEDED IF A VIBRATION JITTER HAS TO BE ADDED'
    tmp1=double(P1)
    DFP=double(P2)
    DIMMAT=long((size(tmp1))[1])
    DXP=1.d/DFP/DIMMAT
  endif
  if n_params() eq 5 then begin ; this is the case with the optical turbulence data as inputs
    VALID_INPUT,'WAVE.PRO','DIMMAT',P1,'integer',0,'no','++','free'
    if P1 mod 2 eq 1 then message,'PHASE SCREEN MATRIX SIZE MUST BE EVEN'
    VALID_INPUT,'WAVE.PRO','DXP',P2,'real',0,'no','++','free'
    VALID_INPUT,'WAVE.PRO','R0',P3,'real',0,'no','++','free'
    VALID_INPUT,'WAVE.PRO','L0',P4,'real',0,'yes','++','free'
    VALID_INPUT,'WAVE.PRO','l0',P5,'real',0,'yes','0+','free'
    if size(LAMBDA,/type) eq 0 then LAMBDA=0.5
    VALID_INPUT,'WAVE.PRO','LAMBDA',LAMBDA,'real',0,'no','++','free'
    DIMMAT=long(P1)
    DXP=double(P2)
    r0l=double(P3*(LAMBDA/0.5d)^1.2)
    OSCALE=double(P4)
    ISCALE=double(P5)
    freq=(COOGRID(DIMMAT,DIMMAT,/ft,scale=1.d/(2*DXP),/radius)).r ; spatial frequency pupil plane radius
    tmp1=freq-freq
    w=where(freq ne 0)
    tmp1[w]=0.0229d*r0l^(-5.d/3)*(freq[w]^2+double(OSCALE ne -1)/OSCALE^2)^(-11.d/6)
    tmp1=tmp1*(1+3.43d*freq*ISCALE+0.538d*(freq*ISCALE)^(7.d/6))*exp(-3.625d*(freq*ISCALE)^2)
    DFP=1.d/DXP/DIMMAT
  endif
  if keyword_set(SPECTRUM) then psd=tmp1
  if size(VIBRATION,/type) ne 0 then begin
    VALID_INPUT,'PSFOTFTSC.PRO','VIBRATION',VIBRATION,'structure',{dim:[1,3],tags:['SIGMA_TTX','SIGMA_TTY','ORIENTATION']},'no','free','free'
    VALID_INPUT,'PSFOTFTSC.PRO','VIBRATION.SIGMA_TTX',VIBRATION.SIGMA_TTX,'real',0,'no','0+','free'
    VALID_INPUT,'PSFOTFTSC.PRO','VIBRATION.SIGMA_TTY',VIBRATION.SIGMA_TTY,'real',0,'no','0+','free'
    VALID_INPUT,'PSFOTFTSC.PRO','VIBRATION.ORIENTATION',VIBRATION.ORIENTATION,'real',0,'no','free','free'
    if size(D1,/type) eq 0 and not keyword_set(TSCPUP) then message,'YOU NEED TO DEFINE A PUPIL IF YOU WANT TO ADD A VIBRATION TO THE PHASE. USE EITHER TSCPUP OR D1,D2 INPUTS.'
  endif
  ;
  ;PUPIL DIAMETERS CHECK [OPTIONAL INPUTS]
  if size(D1,/type) ne 0 then VALID_INPUT,'WAVE.PRO','D1',D1,'real',0,'no','++','free'
  if size(D2,/type) ne 0 then VALID_INPUT,'WAVE.PRO','D2',D2,'real',0,'no','0+','free'
  if size(D1,/type) ne 0 then if size(D2,/type) eq 0 then message,'D2 IS MISSING'
  if size(D2,/type) ne 0 then if size(D1,/type) eq 0 then message,'D1 IS MISSING'
  if size(D1,/type) ne 0 and size(D2,/type) ne 0 then if D1 le D2 then message,'D2 MUST BE < D1'
  if size(D1,/type) ne 0 then if D1 gt 0.5*DIMMAT*DXP then $
    message,'THE MATRIX SIZE (DIMMAT) IS TOO SMALL RELATIVE TO THE PUPIL DIAMETER. IT MUST BE AT LEAST 2 TIMES THE PUPIL DIAMETER EXPRESSED IN PIXELS, WHICH IS '$
    +trim(string(2*(fix(D1/DXP)+1)))+' PIXELS. DO A RETALL AND FIX THE ISSUE.'
  ;
  ;TELESCOPE PUPIL MASK CHECK [OPTIONAL INPUT]
  if keyword_set(TSCPUP) and size(D1,/type) ne 0 then $
    message,'YOU CANNOT SPECIFY A PUPIL DIAMETER (D1) AND A TELESCOPE PUPIL MASK (TSCPUP) AT THE SAME TIME'
  if keyword_set(TSCPUP) then begin
    VALID_INPUT,'WAVE.PRO','TSCPUP',TSCPUP,'real',[2,DIMMAT,DIMMAT],'no','0+','free'
    radius=(COOGRID(DIMMAT,DIMMAT,/ft,scale=DXP*DIMMAT/2,/radius)).r
    puprad=max(radius[where(TSCPUP gt 0.5)]) ; get pupil maximum radius
    if 2*puprad gt 0.5*DIMMAT*DXP then $
    message,'THE MATRIX SIZE (DIMMAT) IS TOO SMALL RELATIVE TO THE PUPIL DIAMETER. IT MUST BE AT LEAST 2 TIMES THE PUPIL DIAMETER EXPRESSED IN PIXELS, WHICH IS '$
    +trim(string(2*(fix(2*puprad/DXP)+1)))+' PIXELS. DO A RETALL AND FIX THE ISSUE.'
  endif
  ;
  ;TELESCOPE STATIC PHASE CHECK [OPTIONAL INPUT]
  if keyword_set(STATIC) then begin
    VALID_INPUT,'WAVE.PRO','STATIC',STATIC,'real',[2,DIMMAT,DIMMAT],'no','free','free'
    radius=(COOGRID(DIMMAT,DIMMAT,/ft,scale=DXP*DIMMAT/2,/radius)).r
    puprad=max(radius[where(abs(STATIC) gt 0.5*max(abs(STATIC)))]) ; get phase maximum radius
    if size(D1,/type) ne 0 then if puprad gt 0.5*D1+DXP or puprad lt 0.5*D1-DXP then message,'THE STATIC PHASE SUPPORT DIAMETER IS NOT THE SAME AS THE PUPIL DIAMETER INDICATED BY INPUT D1.'
    if 2*puprad gt 0.5*DIMMAT*DXP then $
    message,'THE MATRIX SIZE (DIMMAT) IS TOO SMALL RELATIVE TO THE PUPIL DIAMETER. IT MUST BE AT LEAST 2 TIMES THE PUPIL DIAMETER EXPRESSED IN PIXELS, WHICH IS '$
    +trim(string(2*(fix(2*puprad/DXP)+1)))+' PIXELS. DO A RETALL AND FIX THE ISSUE.'
  endif

  ;SOME SETTINGS
  rad2asec=3600.d*180.d/!dpi
  asec2rad=1.d/rad2asec

  ;INSTANTANEOUS PHASE FOURIER TRANSFORM
  if size(SEED,/type) ne 0 then S=long(SEED)
  tmp2=dblarr(DIMMAT+1,DIMMAT+1)
  tmp2[0:DIMMAT-1,0:DIMMAT-1]=tmp1*(DIMMAT*DXP)^2
  tmp2[0:DIMMAT-1,DIMMAT]=tmp2[0:DIMMAT-1,0]
  tmp2[DIMMAT,0:DIMMAT-1]=tmp2[0,0:DIMMAT-1]
  tmp2[DIMMAT,DIMMAT]=tmp2[0,0]
  tmp2=sqrt(tmp2)*randomn(S,DIMMAT+1,DIMMAT+1)
  tmp1=sqrt(2)*(tmp2+rotate(tmp2,2))/2 ; forced even amplitude of wf spectrum (we put it in variable tmp1 to save some memory space)
  tmp2=randomu(S,DIMMAT+1,DIMMAT+1)*2*!dpi
  ; in order to make sure that the phase is real, 
  ; (1) the real part of the phase spectrum is forced to be even
  ; (2) the imaginary part of phase spectrum is forced to be odd
  tmp2=dcomplex((tmp1*cos(0.5*(tmp2-rotate(tmp2,2))))[0:DIMMAT-1,0:DIMMAT-1],(tmp1*sin(0.5*(tmp2-rotate(tmp2,2))))[0:DIMMAT-1,0:DIMMAT-1]) ; phase FT
  if keyword_set(SPECTRUM) then phaseft=tmp2

  ;INSTANTANEOUS PHASE
  tmp2=double(MATHFT(tmp2,dx=dxp,/inverse,ic=DIMMAT/2,jc=DIMMAT/2))

  ;ADDING A STATIC PHASE, IF ANY
  if keyword_set(STATIC) then tmp2=tmp2+STATIC

  ;DRAW AND ADD A RANDOM VIBRATION, IF ANY
  if size(VIBRATION,/type) ne 0 then begin
    tx=randomn(S,1)*VIBRATION.SIGMA_TTX
    ty=randomn(S,1)*VIBRATION.SIGMA_TTY
    x=[tx,ty]
    matrot=[[cos(VIBRATION.ORIENTATION/180.d*!dpi),sin(VIBRATION.ORIENTATION/180.d*!dpi)],[-sin(VIBRATION.ORIENTATION/180.d*!dpi),cos(VIBRATION.ORIENTATION/180.d*!dpi)]]
    y=matrot#x
    if keyword_set(TSCPUP) then begin
      radius=(COOGRID(DIMMAT,DIMMAT,/ft,scale=DXP*DIMMAT/2,/radius)).r
      puprad=max(radius[where(TSCPUP gt 0.5)]) ; get pupil maximum radius
    endif   
    if size(D1,/type) ne 0 then puprad=0.5*D1
    a2=puprad*y[0]*asec2rad/2
    a3=puprad*y[1]*asec2rad/2
    z23=POLZER(DIMMAT,puprad*2/DXP,2,2,/seeaxis)
    phaseTT=(a2*z23[*,*,0]+a3*z23[*,*,1])*2*!dpi/(LAMBDA*1e-6)
    tmp2=tmp2+phaseTT
  endif

  ;PUPIL MASK [OPTION]
  xyrtpupil=COOGRID(DIMMAT,DIMMAT,/ft,scale=DXP*DIMMAT/2)
  if size(D1,/type) ne 0 then pupil=xyrtpupil.r le double(D1)/2 and xyrtpupil.r ge double(D2)/2
  if size(TSCPUP,/type) ne 0 then pupil=TSCPUP

  ;PHASE AVERAGE SUBTRACTION
  tmp2=tmp2-mean(tmp2)
  if size(D1,/type) ne 0 or size(TSCPUP,/type) ne 0 then tmp2[where(pupil gt 0.5)]=tmp2[where(pupil gt 0.5)]-mean(tmp2[where(pupil gt 0.5)])
  if size(D1,/type) ne 0 or size(TSCPUP,/type) ne 0 then tmp2[where(pupil lt 0.5)]=0

  ;INSTANTANEOUS PSF [OPTION]
  if size(pupil,/type) ne 0 then begin
    tmp2=pupil*tmp2
    tmp2[where(pupil ne 0)]=tmp2[where(pupil ne 0)]-mean(tmp2[where(pupil ne 0)])
    Sp=total(pupil)*DXP^2
    apsf=MATHFT(pupil*exp(-dcomplex(0,1)*tmp2),dx=DXP,ic=DIMMAT/2,jc=DIMMAT/2)/Sp
    psf=abs(apsf)^2
    if n_params() eq 5 then dxf=DFP*1e-6*LAMBDA/!dpi*180*3600
  endif

  ;RETURN
  if not keyword_set(SPECTRUM) then begin
    if size(pupil,/type) eq 0 then return,{phase:tmp2,dxp:DXP}
    if size(pupil,/type) ne 0 then if n_params() eq 2 then return,{phase:tmp2,dxp:DXP,apsf:apsf,psf:psf,pupil:pupil}
    if size(pupil,/type) ne 0 then if n_params() eq 5 then return,{phase:tmp2,dxp:DXP,apsf:apsf,psf:psf,pupil:pupil,dxf:dxf}
  endif else begin
    if size(pupil,/type) eq 0 then return,{phase:tmp2,dxp:DXP,phaseft:phaseft,psd:psd,dfp:DFP}
    if size(pupil,/type) ne 0 then if n_params() eq 2 then return,{phase:tmp2,dxp:DXP,apsf:apsf,psf:psf,pupil:pupil,phaseft:phaseft,psd:psd,dfp:DFP}
    if size(pupil,/type) ne 0 then if n_params() eq 5 then return,{phase:tmp2,dxp:DXP,apsf:apsf,psf:psf,pupil:pupil,dxf:dxf,phaseft:phaseft,psd:psd,dfp:DFP}
  endelse

end
